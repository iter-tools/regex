/* @macrome
 * @generatedby @macrome/generator-typescript
 * @generatedfrom ./index.ts#1653624473131
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
  value: true
});

Object.defineProperty(exports, "Pattern", {
  enumerable: true,

  get: function() {
    return _pattern.Pattern;
  }
});

(exports.execGlobal = (exports.exec = void 0));

Object.defineProperty(exports, "parse", {
  enumerable: true,

  get: function() {
    return _pattern.parse;
  }
});

(exports.test = void 0);
var _asyncPeekerate = _interopRequireDefault(require("iter-tools-es/methods/async-peekerate"));
var _asyncWrap = _interopRequireDefault(require("iter-tools-es/methods/async-wrap"));
var _asyncConsume = _interopRequireDefault(require("iter-tools-es/methods/async-consume"));
var _api = require("./api");
var _engine = require("../internal/engine");
var _pattern = require("../pattern");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

const { exec, test, execGlobal } = new _api.AsyncApi(async function* generate(
  pattern,
  iterable,
) {
  const peekr = await (0, _asyncPeekerate.default)(iterable);
  const engine = new _engine.Engine(pattern);

  try {
    engine.feed(null);

    while (!engine.done && !peekr.done) {
      if (engine.starved) {
        engine.feed(peekr.value);
        await peekr.advance();
      }

      yield* engine.traverse0();

      engine.traverse1();
    }

    engine.feed(null);

    yield* engine.traverse0();
  } finally {
    await peekr.return();
  }
});

exports.execGlobal = execGlobal;
exports.test = test;
exports.exec = exec;

const warmupPattern1 = (0, _pattern.parse)('.*', 'g');
const warmupPattern2 = (0, _pattern.parse)('(a)|(b)', 'g');

for (let i = 0; i < 4; i++) {
  (0, _asyncConsume.default)(execGlobal(warmupPattern1, (0, _asyncWrap.default)('ab')));
  (0, _asyncConsume.default)(execGlobal(warmupPattern2, (0, _asyncWrap.default)('ab')));
  (0, _asyncConsume.default)(execGlobal(warmupPattern2, (0, _asyncWrap.default)('a')));
  (0, _asyncConsume.default)(execGlobal(warmupPattern2, (0, _asyncWrap.default)('')));
}
